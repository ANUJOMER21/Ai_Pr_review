import streamlit as st
from typing import Optional, Dict, List
import re
from datetime import datetime

from core.models import User


def authenticate_user() -> Optional[User]:
    """Handle user authentication"""
    if 'user' in st.session_state:
        return st.session_state.user

    if 'session_id' in st.session_state:
        user = st.session_state.user_manager.get_user_by_session(st.session_state.session_id)
        if user:
            st.session_state.user = user
            return user
        else:
            # Invalid session
            del st.session_state.session_id

    return None

def show_login_page():
    """Show login/register page"""
    st.markdown(
        '<div class="main-header"><h1>🤖 AI PR Review Dashboard</h1><p>Please login or register to continue</p></div>',
        unsafe_allow_html=True)

    tab1, tab2 = st.tabs(["🔐 Login", "📝 Register"])

    with tab1:
        st.subheader("Login")
        with st.form("login_form"):
            username = st.text_input("Username or Email")
            password = st.text_input("Password", type="password")
            submit_login = st.form_submit_button("Login", type="primary")

            if submit_login:
                if not username or not password:
                    st.error("Please fill in all fields")
                else:
                    success, session_id = st.session_state.user_manager.authenticate_user(username, password)
                    if success:
                        st.session_state.session_id = session_id
                        st.session_state.user = st.session_state.user_manager.get_user_by_session(session_id)
                        st.success("Login successful!")
                        st.rerun()
                    else:
                        st.error("Invalid credentials")

    with tab2:
        st.subheader("Register")
        with st.form("register_form"):
            new_username = st.text_input("Username")
            new_email = st.text_input("Email")
            new_password = st.text_input("Password", type="password")
            confirm_password = st.text_input("Confirm Password", type="password")
            submit_register = st.form_submit_button("Register", type="primary")

            if submit_register:
                if not all([new_username, new_email, new_password, confirm_password]):
                    st.error("Please fill in all fields")
                elif new_password != confirm_password:
                    st.error("Passwords don't match")
                elif not re.match(r"[^@]+@[^@]+\.[^@]+", new_email):
                    st.error("Invalid email")
                else:
                    success, message = st.session_state.user_manager.create_user(
                        new_username, new_email, new_password
                    )
                    if success:
                        st.success(f"{message} Please login.")
                    else:
                        st.error(message)

def format_review_text(pr: Dict, review_result, files: List[Dict]) -> str:
    """Format review text with enhanced styling"""
    truncated_files = [f['filename'] for f in files if f.get('truncated')]
    truncation_note = f"\n⚠️ Note: Files truncated: {', '.join(truncated_files)}" if truncated_files else ""
    summary = review_result.summary + truncation_note

    return f"""
# 🤖 AI Review for PR #{pr['number']}: {pr['title']}

## 📊 Summary
{summary}

## 🎯 Scores
- **🔒 Security Score:** {review_result.security_score}/100
- **⚡ Quality Score:** {review_result.quality_score}/100
- **🤖 AI Confidence:** {int(review_result.ai_confidence * 100)}%

## 🚨 Security Vulnerabilities ({len(review_result.vulnerabilities)})
{chr(10).join([f"### {i + 1}. {v.get('type', 'Unknown').title()} ({v.get('severity', 'UNKNOWN')})" +
               f"\\n**File:** `{v.get('file', 'Unknown')}`" +
               f"\\n**Description:** {v.get('description', 'No description')}" +
               f"\\n**Recommendation:** {v.get('recommendation', 'No recommendation')}" +
               "\\n" for i, v in enumerate(review_result.vulnerabilities)])}

## ⚠️ Code Quality Issues ({len(review_result.issues)})
{chr(10).join([f"### {i + 1}. {issue.get('type', 'Unknown').title()} ({issue.get('severity', 'UNKNOWN')})" +
               f"\\n**File:** `{issue.get('file', 'Unknown')}`" +
               f"\\n**Description:** {issue.get('description', 'No description')}" +
               f"\\n**Recommendation:** {issue.get('recommendation', 'No recommendation')}" +
               "\\n" for i, issue in enumerate(review_result.issues)])}

## 💡 Recommendations
{chr(10).join([f"{i + 1}. {rec}" for i, rec in enumerate(review_result.recommendations)])}

## 🏁 Decision
**{review_result.approval}**

---
*Generated by AI PR Review Dashboard - {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}*
"""

def show_review_modal(review: Dict):
    """Show review in a modal-style expander"""
    with st.expander("📋 Review Details", expanded=True):
        col1, col2 = st.columns([3, 1])

        with col1:
            st.markdown("## Review Content")
            st.markdown(review['review_text'])

        with col2:
            st.markdown("## Metadata")
            st.metric("Security Score", f"{review['security_score']}/100")
            st.metric("Quality Score", f"{review['quality_score']}/100")
            st.metric("Vulnerabilities", review['vulnerabilities_count'])
            st.metric("Issues", review['issues_count'])
            st.metric("AI Confidence", f"{int(review['ai_confidence'] * 100)}%")

            # Export options
            st.markdown("## Export")
            if st.button("📄 Download as Markdown"):
                st.download_button(
                    label="📥 Download",
                    data=review['review_text'],
                    file_name=f"review_{review['repo_name'].replace('/', '_')}_PR_{review['pr_number']}.md",
                    mime="text/markdown"
                )

        if st.button("✖️ Close Review"):
            st.session_state.show_review_modal = False
            st.session_state.selected_review = None
            st.rerun()

    if st.session_state.get('show_review_modal'):
        show_review_modal(st.session_state.selected_review)